<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概率与统计 on Paperubit的博客</title>
    <link>http://example.org/tags/%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A1/</link>
    <description>Recent content in 概率与统计 on Paperubit的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 19 Dec 2023 15:47:55 +0800</lastBuildDate><atom:link href="http://example.org/tags/%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 概率与统计4</title>
      <link>http://example.org/posts/leetcode-%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A14/</link>
      <pubDate>Tue, 19 Dec 2023 15:47:55 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A14/</guid>
      <description>新 21 点 爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：
爱丽丝以 0 分开始，并在她的得分少于 k 分时抽取数字。 抽取时，她从 [1, maxPts] 的范围中随机获得一个整数作为分数进行累计，其中 maxPts 是一个整数。 每次抽取都是独立的，其结果具有相同的概率。
当爱丽丝获得 k 分 或更多分 时，她就停止抽取数字。
爱丽丝的分数不超过 n 的概率是多少？
与实际答案误差不超过 10-5 的答案将被视为正确答案。
示例 1：
输入：n = 10, k = 1, maxPts = 10 输出：1.00000 解释：爱丽丝得到一张牌，然后停止。 示例 2：
输入：n = 6, k = 1, maxPts = 10 输出：0.60000 解释：爱丽丝得到一张牌，然后停止。 在 10 种可能性中的 6 种情况下，她的得分不超过 6 分。 示例 3：
输入：n = 21, k = 17, maxPts = 10 输出：0.</description>
    </item>
    
    <item>
      <title>Leetcode 概率与统计5</title>
      <link>http://example.org/posts/leetcode-%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A15/</link>
      <pubDate>Tue, 19 Dec 2023 15:47:55 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A15/</guid>
      <description>N个骰子的点数 你选择掷出 num 个色子，请返回所有点数总和的概率。
你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 num 个骰子所能掷出的点数集合中第 i 小的那个的概率。
impl Solution { pub fn dices_probability(n: i32) -&amp;gt; Vec&amp;lt;f64&amp;gt; { let mut ans = vec![1.0 / 6.0].repeat(6); for i in 2..=n as usize { let mut tmp = vec![0.0; 5 * i + 1]; for j in 0..6 { for k in 0..ans.len() { tmp[k + j] += ans[k] / 6.0; } } ans = tmp; } ans } } </description>
    </item>
    
    <item>
      <title>Leetcode 概率与统计1</title>
      <link>http://example.org/posts/leetcode-%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A11/</link>
      <pubDate>Tue, 19 Dec 2023 15:47:54 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A11/</guid>
      <description>飞机座位分配概率 有 n 位乘客即将登机，飞机正好有 n 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。
剩下的乘客将会：
如果他们自己的座位还空着，就坐到自己的座位上，
当他们自己的座位被占用时，随机选择其他座位 第 n 位乘客坐在自己的座位上的概率是多少？
impl Solution { pub fn nth_person_gets_nth_seat(n: i32) -&amp;gt; f64 { if n &amp;lt;= 2 { return 1.0 / n as f64 } let mut prob = 0.5; for i in 3..=n { prob = (1.0 + (i - 2) as f64 * prob) / i as f64; } prob } } </description>
    </item>
    
    <item>
      <title>Leetcode 概率与统计2</title>
      <link>http://example.org/posts/leetcode-%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A12/</link>
      <pubDate>Tue, 19 Dec 2023 15:47:54 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A12/</guid>
      <description>分汤 有 A 和 B 两种类型 的汤。一开始每种类型的汤有 n 毫升。有四种分配操作：
提供 100ml 的 汤A 和 0ml 的 汤B 。 提供 75ml 的 汤A 和 25ml 的 汤B 。 提供 50ml 的 汤A 和 50ml 的 汤B 。 提供 25ml 的 汤A 和 75ml 的 汤B 。 当我们把汤分配给某人之后，汤就没有了。每个回合，我们将从四种概率同为 0.25 的操作中进行分配选择。如果汤的剩余量不足以完成某次操作，我们将尽可能分配。当两种类型的汤都分配完时，停止操作。
注意 不存在先分配 100 ml 汤B 的操作。
需要返回的值： 汤A 先分配完的概率 + 汤A和汤B 同时分配完的概率 / 2。返回值在正确答案 10-5 的范围内将被认为是正确的。
impl Solution { pub fn soup_servings(n: i32) -&amp;gt; f64 { fn recursive(dp: &amp;amp;mut Vec&amp;lt;Vec&amp;lt;f64&amp;gt;&amp;gt;, a: i32, b: i32) -&amp;gt; f64 { if a &amp;lt;= 0 &amp;amp;&amp;amp; b &amp;lt;= 0 { return 0.</description>
    </item>
    
    <item>
      <title>Leetcode 概率与统计3</title>
      <link>http://example.org/posts/leetcode-%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A13/</link>
      <pubDate>Tue, 19 Dec 2023 15:47:54 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A13/</guid>
      <description>期望个数统计 某互联网公司一年一度的春招开始了，一共有 n 名面试者入选。每名面试者都会提交一份简历，公司会根据提供的简历资料产生一个预估的能力值，数值越大代表越有可能通过面试。
小 A 和小 B 负责审核面试者，他们均有所有面试者的简历，并且将各自根据面试者能力值从大到小的顺序浏览。由于简历事先被打乱过，能力值相同的简历的出现顺序是从它们的全排列中等可能地取一个。现在给定 n 名面试者的能力值 scores，设 X 代表小 A 和小 B 的浏览顺序中出现在同一位置的简历数，求 X 的期望。
提示：离散的非负随机变量的期望计算公式为。在本题中，由于 X 的取值为 0 到 n 之间，期望计算公式可以是。
impl Solution { pub fn expect_number(scores: Vec&amp;lt;i32&amp;gt;) -&amp;gt; i32 { scores.into_iter().collect::&amp;lt;std::collections::HashSet&amp;lt;i32&amp;gt;&amp;gt;().len() as i32 } } </description>
    </item>
    
  </channel>
</rss>
