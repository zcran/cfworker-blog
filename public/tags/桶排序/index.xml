<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>桶排序 on Paperubit的博客</title>
    <link>http://example.org/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/</link>
    <description>Recent content in 桶排序 on Paperubit的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 19 Dec 2023 15:46:22 +0800</lastBuildDate><atom:link href="http://example.org/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 桶排序1</title>
      <link>http://example.org/posts/leetcode-%E6%A1%B6%E6%8E%92%E5%BA%8F1/</link>
      <pubDate>Tue, 19 Dec 2023 15:46:22 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E6%A1%B6%E6%8E%92%E5%BA%8F1/</guid>
      <description>存在重复元素 III 给你一个整数数组 nums 和两个整数 indexDiff 和 valueDiff 。
找出满足下述条件的下标对 (i, j)：
i != j, abs(i - j) &amp;lt;= indexDiff abs(nums[i] - nums[j]) &amp;lt;= valueDiff 如果存在，返回 true ；否则，返回 false 。
impl Solution { pub fn contains_nearby_almost_duplicate( nums: Vec&amp;lt;i32&amp;gt;, index_diff: i32, value_diff: i32, ) -&amp;gt; bool { // NOTE 桶排序的好题，通过将数字划分为若干个区间，来判断是否滑动窗口内是否存在value_diff范围内的数字对 // 桶的大小为value_diff，作为整除的除数因此加一 let value_diff = value_diff as i64 + 1; let mut num_bucket = std::collections::HashMap::new(); for (i, &amp;amp;num) in nums.iter().enumerate() { let key = Self::get_id(num, value_diff); if num_bucket.</description>
    </item>
    
    <item>
      <title>Leetcode 桶排序2</title>
      <link>http://example.org/posts/leetcode-%E6%A1%B6%E6%8E%92%E5%BA%8F2/</link>
      <pubDate>Tue, 19 Dec 2023 15:46:22 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E6%A1%B6%E6%8E%92%E5%BA%8F2/</guid>
      <description>根据字符出现频率排序 给定一个字符串 s ，根据字符出现的 频率 对其进行 降序排序 。一个字符出现的 频率 是它出现在字符串中的次数。
返回 已排序的字符串 。如果有多个答案，返回其中任何一个。
impl Solution { pub fn frequency_sort(s: String) -&amp;gt; String { let mut bucket = vec![(0,0);256]; for b in s.bytes() { bucket[b as usize].0 += 1; bucket[b as usize].1 = b; } bucket.sort_by(|a, b| b.0.cmp(&amp;amp;a.0)); let mut res = String::new(); for (times, ch) in bucket { for _ in 0..times { res.push(ch as char); } } res } } </description>
    </item>
    
    <item>
      <title>Leetcode 桶排序3</title>
      <link>http://example.org/posts/leetcode-%E6%A1%B6%E6%8E%92%E5%BA%8F3/</link>
      <pubDate>Tue, 19 Dec 2023 15:46:22 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E6%A1%B6%E6%8E%92%E5%BA%8F3/</guid>
      <description>前K个高频单词 给定一个单词列表 words 和一个整数 k ，返回前 k 个出现次数最多的单词。
返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率， 按字典顺序 排序。
use std::collections::{HashMap, BTreeSet}; impl Solution { pub fn top_k_frequent(words: Vec&amp;lt;String&amp;gt;, k: i32) -&amp;gt; Vec&amp;lt;String&amp;gt; { let mut cnt = HashMap::new(); let mut max_freq = 0; for word in words { let entry = cnt.entry(word).or_insert(0); *entry += 1; max_freq = max_freq.max(*entry); } let mut buckets = vec![BTreeSet::new(); max_freq as usize + 1]; for (word, freq) in cnt.iter() { buckets[*freq as usize].</description>
    </item>
    
    <item>
      <title>Leetcode 桶排序4</title>
      <link>http://example.org/posts/leetcode-%E6%A1%B6%E6%8E%92%E5%BA%8F4/</link>
      <pubDate>Tue, 19 Dec 2023 15:46:22 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E6%A1%B6%E6%8E%92%E5%BA%8F4/</guid>
      <description>前 K 个高频元素 给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。
class Solution { public: vector&amp;lt;int&amp;gt; topKFrequent(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { unordered_map&amp;lt;int,int&amp;gt; mp; vector&amp;lt;int&amp;gt; res; //统计最大的频次，决定开多大的空间 int max_cnt=0; for(auto num:nums) { mp[num]++; max_cnt=max(max_cnt,mp[num]); } vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; bucket(max_cnt+1); //计数，桶号为频次，元素为数字 for(auto iter:mp){ bucket[iter.second].push_back(iter.first); } for(int i=bucket.size()-1;i&amp;gt;=0 &amp;amp;&amp;amp; k;i--){ for(auto num:bucket[i]){ if(k--) res.push_back(num); else break; } } return res; } }; use std::{ cmp::Reverse, collections::{BinaryHeap, HashMap}, }; impl Solution { pub fn top_k_frequent(nums: Vec&amp;lt;i32&amp;gt;, k: i32) -&amp;gt; Vec&amp;lt;i32&amp;gt; { let mut map = HashMap::new(); nums.</description>
    </item>
    
  </channel>
</rss>
