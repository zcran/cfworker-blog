<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>后缀数组 on Paperubit的博客</title>
    <link>http://example.org/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</link>
    <description>Recent content in 后缀数组 on Paperubit的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 19 Dec 2023 15:46:47 +0800</lastBuildDate><atom:link href="http://example.org/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 后缀数组1</title>
      <link>http://example.org/posts/leetcode-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%841/</link>
      <pubDate>Tue, 19 Dec 2023 15:46:47 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%841/</guid>
      <description>构造字符串的总得分和 你需要从空字符串开始 构造 一个长度为 n 的字符串 s ，构造的过程为每次给当前字符串 前面 添加 一个 字符。构造过程中得到的所有字符串编号为 1 到 n ，其中长度为 i 的字符串编号为 si 。
比方说，s = &amp;ldquo;abaca&amp;rdquo; ，s1 == &amp;ldquo;a&amp;rdquo; ，s2 == &amp;ldquo;ca&amp;rdquo; ，s3 == &amp;ldquo;aca&amp;rdquo; 依次类推。 si 的 得分 为 si 和 sn 的 最长公共前缀 的长度（注意 s == sn ）。
给你最终的字符串 s ，请你返回每一个 si 的 得分之和 。
class Solution { public: long long sumScores(string s) { int n = s.length(); long ans = n; vector&amp;lt;int&amp;gt; z(n); for (int i = 1, l = 0, r = 0; i &amp;lt; n; ++i) { z[i] = max(min(z[i - l], r - i + 1), 0); while (i + z[i] &amp;lt; n &amp;amp;&amp;amp; s[z[i]] == s[i + z[i]]) { l = i; r = i + z[i]; ++z[i]; } ans += z[i]; } return ans; } }; </description>
    </item>
    
    <item>
      <title>Leetcode 后缀数组2</title>
      <link>http://example.org/posts/leetcode-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%842/</link>
      <pubDate>Tue, 19 Dec 2023 15:46:47 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%842/</guid>
      <description>划分数字的方案数 你写下了若干 正整数 ，并将它们连接成了一个字符串 num 。但是你忘记给这些数字之间加逗号了。你只记得这一列数字是 非递减 的且 没有 任何数字有前导 0 。
请你返回有多少种可能的 正整数数组 可以得到字符串 num 。由于答案可能很大，将结果对 10^9 + 7 取余 后返回。
impl Solution { pub fn number_of_combinations(num: String) -&amp;gt; i32 { if num.chars().nth(0) == Some(&amp;#39;0&amp;#39;) {return 0;} let n = num.len(); let mut ord = vec![vec![0;n + 1];n]; for i in 0..n { ord[i][1] = (num.chars().nth(i).unwrap() as u8 - &amp;#39;0&amp;#39; as u8) as usize; } let mut nr_ord = 10; for l in 2.</description>
    </item>
    
    <item>
      <title>Leetcode 后缀数组3</title>
      <link>http://example.org/posts/leetcode-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%843/</link>
      <pubDate>Tue, 19 Dec 2023 15:46:47 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%843/</guid>
      <description>最长公共子路径 一个国家由 n 个编号为 0 到 n - 1 的城市组成。在这个国家里，每两个 城市之间都有一条道路连接。
总共有 m 个编号为 0 到 m - 1 的朋友想在这个国家旅游。他们每一个人的路径都会包含一些城市。每条路径都由一个整数数组表示，每个整数数组表示一个朋友按顺序访问过的城市序列。同一个城市在一条路径中可能 重复 出现，但同一个城市在一条路径中不会连续出现。
给你一个整数 n 和二维数组 paths ，其中 paths[i] 是一个整数数组，表示第 i 个朋友走过的路径，请你返回 每一个 朋友都走过的 最长公共子路径 的长度，如果不存在公共子路径，请你返回 0 。
一个 子路径 指的是一条路径中连续的城市序列。
fn sa_is(s: &amp;amp;[usize], upper: usize) -&amp;gt; Vec&amp;lt;usize&amp;gt; { let n = s.len(); match n { 0 =&amp;gt; return vec![], 1 =&amp;gt; return vec![0], 2 =&amp;gt; return if s[0] &amp;lt; s[1] { vec!</description>
    </item>
    
    <item>
      <title>Leetcode 后缀数组4</title>
      <link>http://example.org/posts/leetcode-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%844/</link>
      <pubDate>Tue, 19 Dec 2023 15:46:47 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%844/</guid>
      <description>最长重复子串 给你一个字符串 s ，考虑其所有 重复子串 ：即 s 的（连续）子串，在 s 中出现 2 次或更多次。这些出现之间可能存在重叠。
返回 任意一个 可能具有最长长度的重复子串。如果 s 不含重复子串，那么答案为 &amp;quot;&amp;quot; 。
impl Solution { // tp已经排好，开始排序第一关键字 fn sort(sa: &amp;amp;mut Vec&amp;lt;usize&amp;gt;, rank: &amp;amp;mut Vec&amp;lt;usize&amp;gt;, tp: &amp;amp;Vec&amp;lt;usize&amp;gt;, n: usize, m: usize) { let mut tax = vec![0; m+1]; // 第一关键字基数排序 rank[1..].iter().for_each(|x| tax[*x] += 1); // 前缀和，为了后面方便计算第几名 for i in 1..=m { tax[i] += tax[i-1]; } tp[1..].iter().rev().for_each(|&amp;amp;key| { // 拿最小的第二关键字对应的后缀key_2，然后通过rank找到他对应的第一关键字所处的level(第一关键字排名) let level = rank[key]; // tax[level]就表示在这里level之下一共有j个数，则后缀(tp[i])排名第j // 此时放的是第一关键字相同，第二关键字最大 // rank其实也是排好的，拿的是前w/2的rank let j = tax[level]; sa[j] = key; tax[level] -= 1; }); } fn init(s: &amp;amp;str, n: usize, m: usize) -&amp;gt; (Vec&amp;lt;usize&amp;gt;, Vec&amp;lt;usize&amp;gt;, Vec&amp;lt;usize&amp;gt;) { // 只有第一关键字直接映射就好 let mut rank = vec!</description>
    </item>
    
    <item>
      <title>博文总述</title>
      <link>http://example.org/posts/my-first-post/</link>
      <pubDate>Thu, 18 May 2023 17:06:05 +0800</pubDate>
      
      <guid>http://example.org/posts/my-first-post/</guid>
      <description>博文总述
标签： - rust - leetcode初级算法篇 leetcode算法类型： 见下方超链接类别 </description>
    </item>
    
  </channel>
</rss>
