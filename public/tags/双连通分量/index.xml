<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>双连通分量 on Paperubit的博客</title>
    <link>http://example.org/tags/%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</link>
    <description>Recent content in 双连通分量 on Paperubit的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 19 Dec 2023 15:12:57 +0800</lastBuildDate><atom:link href="http://example.org/tags/%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 双连通分量1</title>
      <link>http://example.org/posts/leetcode-%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F1/</link>
      <pubDate>Tue, 19 Dec 2023 15:12:57 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F1/</guid>
      <description>查找集群内的关键连接 数据中心有 n 台服务器，分别按从 0 到 n-1 的方式进行了编号。它们之间以 服务器到服务器 的形式相互连接组成了一个内部集群，连接是无向的。用 connections 表示集群网络，connections[i] = [a, b] 表示服务器 a 和 b 之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。
关键连接 是在该集群中的重要连接，假如我们将它移除，便会导致某些服务器无法访问其他服务器。
请你以任意顺序返回该集群内的所有 关键连接 。
use std::iter::repeat; static mut DFN: [i32; 100010] = [0; 100010]; static mut LOW: [i32; 100010] = [0; 100010]; static mut DFN_CNT: i32 = 0; impl Solution { pub fn critical_connections(n: i32, connections: Vec&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt;) -&amp;gt; Vec&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt; { return unsafe{Solution::critical_connections2(n,connections)}; } pub unsafe fn critical_connections2(n: i32, connections: Vec&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt;) -&amp;gt; Vec&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt; { let mut graph: Vec&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt; = repeat(vec!</description>
    </item>
    
    <item>
      <title>Leetcode 双连通分量2</title>
      <link>http://example.org/posts/leetcode-%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F2/</link>
      <pubDate>Tue, 19 Dec 2023 15:12:57 +0800</pubDate>
      
      <guid>http://example.org/posts/leetcode-%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F2/</guid>
      <description>夺回据点 欢迎各位勇者来到力扣城，本次试炼主题为「夺回据点」。
魔物了占领若干据点，这些据点被若干条道路相连接，roads[i] = [x, y] 表示编号 x、y 的两个据点通过一条道路连接。
现在勇者要将按照以下原则将这些据点逐一夺回：
在开始的时候，勇者可以花费资源先夺回一些据点，初始夺回第 j 个据点所需消耗的资源数量为 cost[j]
接下来，勇者在不消耗资源情况下，每次可以夺回一个和「已夺回据点」相连接的魔物据点，并对其进行夺回
注：为了防止魔物暴动，勇者在每一次夺回据点后（包括花费资源夺回据点后），需要保证剩余的所有魔物据点之间是相连通的（不经过「已夺回据点」）。
请返回勇者夺回所有据点需要消耗的最少资源数量。
注意：
输入保证初始所有据点都是连通的，且不存在重边和自环 示例 1：
输入： cost = [1,2,3,4,5,6] roads = [[0,1],[0,2],[1,3],[2,3],[1,2],[2,4],[2,5]]
输出：6
解释： 勇者消耗资源 6 夺回据点 0 和 4，魔物据点 1、2、3、5 相连通； 第一次夺回据点 1，魔物据点 2、3、5 相连通； 第二次夺回据点 3，魔物据点 2、5 相连通； 第三次夺回据点 2，剩余魔物据点 5； 第四次夺回据点 5，无剩余魔物据点； 因此最少需要消耗资源为 6，可占领所有据点。
// Trajan算法 class Solution { const int S = 0; int n; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; e; vector&amp;lt;bool&amp;gt; isCut; vector&amp;lt;int&amp;gt; dfn, low; int clk = 0; stack&amp;lt;int&amp;gt; stk; // 所有点双连通分量 vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dcc; void tarjan(int sn) { dfn[sn] = low[sn] = ++clk; stk.</description>
    </item>
    
    <item>
      <title>博文总述</title>
      <link>http://example.org/posts/my-first-post/</link>
      <pubDate>Thu, 18 May 2023 17:06:05 +0800</pubDate>
      
      <guid>http://example.org/posts/my-first-post/</guid>
      <description>博文总述
标签： - rust - leetcode初级算法篇 leetcode算法类型： 见下方超链接类别 </description>
    </item>
    
  </channel>
</rss>
